'''ChainMap (цепочка отображений) - позволяет организовать работу
с несколькими словарми'''

from collections import ChainMap

"Создадим несколько словарей для построения цепочки"
d_1 = {'a': 2, 'b': 4, 'c': 6}
d_2 = {'a': 10, 'b': 20, 'd': 40}

"Создание ChainMap"
d_map = ChainMap(d_1, d_2)  # Важен порядок - от этого зависят ответы

print(d_map)
# ChainMap({'a': 2, 'b': 4, 'c': 6}, {'a': 10, 'b': 20, 'd': 40})


"Изменим значение в словаре менять и значение в ChainMap (ссылочная структура данных)"
d_2['a'] = 100

print(d_map)
# ChainMap({'a': 2, 'b': 4, 'c': 6}, {'a': 100, 'b': 20, 'd': 40})


"Обращение по ключу"
print(d_map['a'])  # Нашли в первом словаре и остановили поиск
# 2

print(d_map['d'])  # Нашли в втором словаре и остановили поиск
# 40


"Методы в Collections ChainMap"

"new_child() - Позволяет взять уже существующую коллекцию и добавить дополнительные словари в начале"
x = d_map.new_child()

print(x)
# ChainMap({}, {'a': 2, 'b': 4, 'c': 6}, {'a': 100, 'b': 20, 'd': 40})

"maps[0] - Обращение к одному из словарей"
print(x.maps[0])
# {}

print(x.maps[-1])
# {'a': 100, 'b': 20, 'd': 40}

"Позволяет узнать какие родители были при создании новой Collections методом new_child()"
print(x.parents)
# ChainMap({'a': 2, 'b': 4, 'c': 6}, {'a': 100, 'b': 20, 'd': 40})


"Создадим новую коллекцию основанную на 1-й коллекции"
y = d_map.new_child()

print(y)
# ChainMap({}, {'a': 2, 'b': 4, 'c': 6}, {'a': 100, 'b': 20, 'd': 40})

print(y['a'])
# 2

"Произведём изменение коллекции"
y['a'] = 1

print(y)
# ChainMap({'a': 1}, {'a': 2, 'b': 4, 'c': 6}, {'a': 100, 'b': 20, 'd': 40})
# Так как ключ 'a' не был найден в 1-й коллекции, он туда добавлися


"Получим список ключей"
print(list(y))
# ['a', 'b', 'd', 'c']

"Получим список значений"
print(list(y.values()))
# [1, 4, 40, 6]
