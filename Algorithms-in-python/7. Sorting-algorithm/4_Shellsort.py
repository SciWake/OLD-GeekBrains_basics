'''
Обзор алгоритма сорировки пузырьком:
    * Сложность: O(n^2) / O(n (log n)^2) или O(n^3/2) - Всё зависит от шага;
    * Устойчивость (стабильность): Неустойчивая;
    * Тип (категория): Вставками;
    * Потребление памяти: Не требует дополнительной памяти.

Принцип работы: Выбираем шаг для срвнения элементов (increment). Последовательно сравниваем элементы массива находящиеся
один от другого на расстоянии шага. После того, как мы прошлись по массиву с шагом increment, мы уменьшаем шаг и
и повторяем сравнение элементов на расстоянии этого шага.

Эффектиность сортировки зависит от выбора шага. Изначально Шелл использовал increment = Значение массива делил нацело
на два и в следующем ветке снова делил значение на цело на два. Когда значение шага будет уменьшено до еденицы, мы
попарно сравним все элементы попарно и сортировка будет завершена.

В нашей сортировке мы возьмём последовательность чисел, которая была определана имперически - это числа
1, 4, 10, 23, 57, 132, 301, 701, 1750 - Данная последовательность шагов является лучшей из всех возможных сортировок
методом Шелла, если в сорируемом массиве до 4000 элементов.
'''

# Генерация массива
import random

size = 10
array = [i for i in range(size)]
random.shuffle(array)
print(array)


def shell_sort(array):
    assert len(array) < 4000, "Массив больше 4000"

    def new_increment(array):
        inc = [1, 4, 10, 23, 57, 132, 301, 701, 1750]

        while len(array) <= inc[-1]:  # Проверим длину массива и исключим шаги, которые не подходят
            inc.pop()

        while len(inc) > 0:  # Пока в списке есть значения, возвращаем их
            yield inc.pop()

    # Получение значения инкремента
    for increment in new_increment(array):
        # Перебор индексов с значения increment и заканчивая длинной нашего массива
        for i in range(increment, len(array)):
            # Переменная j будет уменьшаться, она начинается от значения i, заканчивается значением increment - 1
            # Двигается с шагом минус increment
            for j in range(i, increment - 1, - increment):
                if array[j - increment] <= array[j]:
                    break
                array[j], array[j - increment] = array[j - increment], array[j]


shell_sort(array)
print(array)
