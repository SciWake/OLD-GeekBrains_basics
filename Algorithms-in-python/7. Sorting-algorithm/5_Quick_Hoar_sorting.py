'''
Обзор алгоритма сорировки пузырьком:
    * Сложность: O(n^2) / лучшее время O(n log n)
    * Устойчивость (стабильность): Неустойчивая;
    * Тип (категория): Обменная;
    * Потребление памяти: O(n) / Не требует дополнительной памяти.
    O(n) - Если мы сортируем массив размером в миллион элементов, то нам требуется память на сам массив и на хранение
    его копии. Но есть варианты, которые не требуют затрат на память.

Принцип работы: На первом этапе мы выбираем опорный элемент (pivot). В качестве опрогоно, может быть выбран первый
элемент, последний или случайно. От выбора опорного элемента не зависит корректность, но в отдельных случаях может
зависить его эффективность.
На втором этапе, мы сравниваем все элементы с опроным и переставляем их в массиве так, чтобы разбить массив на три
непрерывных отрезка: меньше, равные, больше опорного.
На третьем этапе для отрезком меньше, равные, больше рекусивно выполняем сортировку. Так как алгортм является
рекусивным, то необходим базовый случай. Когда длина массива равна 1 сортировать его не нужно.
'''

# Генерация массива
import random

size = 10
array = [i for i in range(size)]
random.shuffle(array)
print(array)


# Данная версия требует дополнительной памяти
def quick_sort(array):
    if len(array) <= 1:
        return array
    pivot = random.choice(array)
    s_ar = []
    m_ar = []
    l_ar = []

    for item in array:

        if item < pivot:
            s_ar.append(item)
        elif item > pivot:
            l_ar.append(item)
        elif item == pivot:
            m_ar.append(item)
        else:
            raise Exception(f'Необычный элемент {item}')

    return quick_sort(s_ar) + m_ar + quick_sort(l_ar)


print(quick_sort(array))
