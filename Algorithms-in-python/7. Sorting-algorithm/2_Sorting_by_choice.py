'''
Обзор алгоритма сорировки пузырьком:
    * Сложность: O(n^2);
    * Устойчивость (стабильность): Устойчивая / неустойчивая - зависит от реализации;
    * Тип (категория): Выбором;
    * Потребление памяти: Не требует дополнительной памяти.

Принцип работы: Массив делится на две части - отсротированная и неотсротированная часть. Изначально, весь массив - это
одна неостротированная часть. На первом этапе мы находим наименьший элемент неотсортированной части массива, после мы
меняем его местами с первым элементом с неотсортированной частью массива (Так как массив не отсортированный помещаем
на первое место массива). После этого, нулевая ячейка массива считается остротированной.
Далее, повторяем эти действия до полной сортировки. На каждом этапе внешнего цикла, левая часть отсортированного массива
будет увиличиваться на 1 элемент, а права уменьшаться.
'''

# Генерация массива
import random

size = 10
array = [i for i in range(size)]
random.shuffle(array)
print(array)


# Если передать изменяемый объект, то изменения с использованием ссылочной структуры хранения возможно произвести сразу.
# То есть, производить возврат массива не требуется, он будет уже изменём
def selection_sort(array):
    for i in range(len(array)):
        idx_min = i

        for j in range(i + 1, len(array)):  # Проход по неотсоритрованной части массива
            if array[j] < array[idx_min]:
                idx_min = j

        array[idx_min], array[i] = array[i], array[idx_min]


selection_sort(array)
print(array)
